/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ForumTagResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumTagResponse{}

// ForumTagResponse struct for ForumTagResponse
type ForumTagResponse struct {
	Id string `json:"id" validate:"regexp=^(0|[1-9][0-9]*)$"`
	Name string `json:"name"`
	Moderated bool `json:"moderated"`
	EmojiId *string `json:"emoji_id,omitempty" validate:"regexp=^(0|[1-9][0-9]*)$"`
	EmojiName NullableString `json:"emoji_name,omitempty"`
}

type _ForumTagResponse ForumTagResponse

// NewForumTagResponse instantiates a new ForumTagResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumTagResponse(id string, name string, moderated bool) *ForumTagResponse {
	this := ForumTagResponse{}
	this.Id = id
	this.Name = name
	this.Moderated = moderated
	return &this
}

// NewForumTagResponseWithDefaults instantiates a new ForumTagResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumTagResponseWithDefaults() *ForumTagResponse {
	this := ForumTagResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ForumTagResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ForumTagResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ForumTagResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ForumTagResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ForumTagResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ForumTagResponse) SetName(v string) {
	o.Name = v
}

// GetModerated returns the Moderated field value
func (o *ForumTagResponse) GetModerated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Moderated
}

// GetModeratedOk returns a tuple with the Moderated field value
// and a boolean to check if the value has been set.
func (o *ForumTagResponse) GetModeratedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Moderated, true
}

// SetModerated sets field value
func (o *ForumTagResponse) SetModerated(v bool) {
	o.Moderated = v
}

// GetEmojiId returns the EmojiId field value if set, zero value otherwise.
func (o *ForumTagResponse) GetEmojiId() string {
	if o == nil || IsNil(o.EmojiId) {
		var ret string
		return ret
	}
	return *o.EmojiId
}

// GetEmojiIdOk returns a tuple with the EmojiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTagResponse) GetEmojiIdOk() (*string, bool) {
	if o == nil || IsNil(o.EmojiId) {
		return nil, false
	}
	return o.EmojiId, true
}

// HasEmojiId returns a boolean if a field has been set.
func (o *ForumTagResponse) HasEmojiId() bool {
	if o != nil && !IsNil(o.EmojiId) {
		return true
	}

	return false
}

// SetEmojiId gets a reference to the given string and assigns it to the EmojiId field.
func (o *ForumTagResponse) SetEmojiId(v string) {
	o.EmojiId = &v
}

// GetEmojiName returns the EmojiName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ForumTagResponse) GetEmojiName() string {
	if o == nil || IsNil(o.EmojiName.Get()) {
		var ret string
		return ret
	}
	return *o.EmojiName.Get()
}

// GetEmojiNameOk returns a tuple with the EmojiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ForumTagResponse) GetEmojiNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmojiName.Get(), o.EmojiName.IsSet()
}

// HasEmojiName returns a boolean if a field has been set.
func (o *ForumTagResponse) HasEmojiName() bool {
	if o != nil && o.EmojiName.IsSet() {
		return true
	}

	return false
}

// SetEmojiName gets a reference to the given NullableString and assigns it to the EmojiName field.
func (o *ForumTagResponse) SetEmojiName(v string) {
	o.EmojiName.Set(&v)
}
// SetEmojiNameNil sets the value for EmojiName to be an explicit nil
func (o *ForumTagResponse) SetEmojiNameNil() {
	o.EmojiName.Set(nil)
}

// UnsetEmojiName ensures that no value is present for EmojiName, not even an explicit nil
func (o *ForumTagResponse) UnsetEmojiName() {
	o.EmojiName.Unset()
}

func (o ForumTagResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumTagResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["moderated"] = o.Moderated
	if !IsNil(o.EmojiId) {
		toSerialize["emoji_id"] = o.EmojiId
	}
	if o.EmojiName.IsSet() {
		toSerialize["emoji_name"] = o.EmojiName.Get()
	}
	return toSerialize, nil
}

func (o *ForumTagResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"moderated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varForumTagResponse := _ForumTagResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varForumTagResponse)

	if err != nil {
		return err
	}

	*o = ForumTagResponse(varForumTagResponse)

	return err
}

type NullableForumTagResponse struct {
	value *ForumTagResponse
	isSet bool
}

func (v NullableForumTagResponse) Get() *ForumTagResponse {
	return v.value
}

func (v *NullableForumTagResponse) Set(val *ForumTagResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableForumTagResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableForumTagResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumTagResponse(val *ForumTagResponse) *NullableForumTagResponse {
	return &NullableForumTagResponse{value: val, isSet: true}
}

func (v NullableForumTagResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumTagResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


