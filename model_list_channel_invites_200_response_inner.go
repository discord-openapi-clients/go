/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
	"fmt"
)

// ListChannelInvites200ResponseInner struct for ListChannelInvites200ResponseInner
type ListChannelInvites200ResponseInner struct {
	FriendInviteResponse *FriendInviteResponse
	GroupDMInviteResponse *GroupDMInviteResponse
	GuildInviteResponse *GuildInviteResponse
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ListChannelInvites200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into FriendInviteResponse
	err = json.Unmarshal(data, &dst.FriendInviteResponse);
	if err == nil {
		jsonFriendInviteResponse, _ := json.Marshal(dst.FriendInviteResponse)
		if string(jsonFriendInviteResponse) == "{}" { // empty struct
			dst.FriendInviteResponse = nil
		} else {
			return nil // data stored in dst.FriendInviteResponse, return on the first match
		}
	} else {
		dst.FriendInviteResponse = nil
	}

	// try to unmarshal JSON data into GroupDMInviteResponse
	err = json.Unmarshal(data, &dst.GroupDMInviteResponse);
	if err == nil {
		jsonGroupDMInviteResponse, _ := json.Marshal(dst.GroupDMInviteResponse)
		if string(jsonGroupDMInviteResponse) == "{}" { // empty struct
			dst.GroupDMInviteResponse = nil
		} else {
			return nil // data stored in dst.GroupDMInviteResponse, return on the first match
		}
	} else {
		dst.GroupDMInviteResponse = nil
	}

	// try to unmarshal JSON data into GuildInviteResponse
	err = json.Unmarshal(data, &dst.GuildInviteResponse);
	if err == nil {
		jsonGuildInviteResponse, _ := json.Marshal(dst.GuildInviteResponse)
		if string(jsonGuildInviteResponse) == "{}" { // empty struct
			dst.GuildInviteResponse = nil
		} else {
			return nil // data stored in dst.GuildInviteResponse, return on the first match
		}
	} else {
		dst.GuildInviteResponse = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ListChannelInvites200ResponseInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ListChannelInvites200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.FriendInviteResponse != nil {
		return json.Marshal(&src.FriendInviteResponse)
	}

	if src.GroupDMInviteResponse != nil {
		return json.Marshal(&src.GroupDMInviteResponse)
	}

	if src.GuildInviteResponse != nil {
		return json.Marshal(&src.GuildInviteResponse)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableListChannelInvites200ResponseInner struct {
	value *ListChannelInvites200ResponseInner
	isSet bool
}

func (v NullableListChannelInvites200ResponseInner) Get() *ListChannelInvites200ResponseInner {
	return v.value
}

func (v *NullableListChannelInvites200ResponseInner) Set(val *ListChannelInvites200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListChannelInvites200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListChannelInvites200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListChannelInvites200ResponseInner(val *ListChannelInvites200ResponseInner) *NullableListChannelInvites200ResponseInner {
	return &NullableListChannelInvites200ResponseInner{value: val, isSet: true}
}

func (v NullableListChannelInvites200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListChannelInvites200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


