/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
)

// checks if the MessageAllowedMentionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageAllowedMentionsRequest{}

// MessageAllowedMentionsRequest struct for MessageAllowedMentionsRequest
type MessageAllowedMentionsRequest struct {
	Parse []MessageAllowedMentionsRequestParseInner `json:"parse,omitempty"`
	Users []GetEntitlementsSkuIdsParameterOneOfInner `json:"users,omitempty"`
	Roles []GetEntitlementsSkuIdsParameterOneOfInner `json:"roles,omitempty"`
	RepliedUser NullableBool `json:"replied_user,omitempty"`
}

// NewMessageAllowedMentionsRequest instantiates a new MessageAllowedMentionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageAllowedMentionsRequest() *MessageAllowedMentionsRequest {
	this := MessageAllowedMentionsRequest{}
	return &this
}

// NewMessageAllowedMentionsRequestWithDefaults instantiates a new MessageAllowedMentionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageAllowedMentionsRequestWithDefaults() *MessageAllowedMentionsRequest {
	this := MessageAllowedMentionsRequest{}
	return &this
}

// GetParse returns the Parse field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageAllowedMentionsRequest) GetParse() []MessageAllowedMentionsRequestParseInner {
	if o == nil {
		var ret []MessageAllowedMentionsRequestParseInner
		return ret
	}
	return o.Parse
}

// GetParseOk returns a tuple with the Parse field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageAllowedMentionsRequest) GetParseOk() ([]MessageAllowedMentionsRequestParseInner, bool) {
	if o == nil || IsNil(o.Parse) {
		return nil, false
	}
	return o.Parse, true
}

// HasParse returns a boolean if a field has been set.
func (o *MessageAllowedMentionsRequest) HasParse() bool {
	if o != nil && !IsNil(o.Parse) {
		return true
	}

	return false
}

// SetParse gets a reference to the given []MessageAllowedMentionsRequestParseInner and assigns it to the Parse field.
func (o *MessageAllowedMentionsRequest) SetParse(v []MessageAllowedMentionsRequestParseInner) {
	o.Parse = v
}

// GetUsers returns the Users field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageAllowedMentionsRequest) GetUsers() []GetEntitlementsSkuIdsParameterOneOfInner {
	if o == nil {
		var ret []GetEntitlementsSkuIdsParameterOneOfInner
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageAllowedMentionsRequest) GetUsersOk() ([]GetEntitlementsSkuIdsParameterOneOfInner, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *MessageAllowedMentionsRequest) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []GetEntitlementsSkuIdsParameterOneOfInner and assigns it to the Users field.
func (o *MessageAllowedMentionsRequest) SetUsers(v []GetEntitlementsSkuIdsParameterOneOfInner) {
	o.Users = v
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageAllowedMentionsRequest) GetRoles() []GetEntitlementsSkuIdsParameterOneOfInner {
	if o == nil {
		var ret []GetEntitlementsSkuIdsParameterOneOfInner
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageAllowedMentionsRequest) GetRolesOk() ([]GetEntitlementsSkuIdsParameterOneOfInner, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *MessageAllowedMentionsRequest) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []GetEntitlementsSkuIdsParameterOneOfInner and assigns it to the Roles field.
func (o *MessageAllowedMentionsRequest) SetRoles(v []GetEntitlementsSkuIdsParameterOneOfInner) {
	o.Roles = v
}

// GetRepliedUser returns the RepliedUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageAllowedMentionsRequest) GetRepliedUser() bool {
	if o == nil || IsNil(o.RepliedUser.Get()) {
		var ret bool
		return ret
	}
	return *o.RepliedUser.Get()
}

// GetRepliedUserOk returns a tuple with the RepliedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageAllowedMentionsRequest) GetRepliedUserOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepliedUser.Get(), o.RepliedUser.IsSet()
}

// HasRepliedUser returns a boolean if a field has been set.
func (o *MessageAllowedMentionsRequest) HasRepliedUser() bool {
	if o != nil && o.RepliedUser.IsSet() {
		return true
	}

	return false
}

// SetRepliedUser gets a reference to the given NullableBool and assigns it to the RepliedUser field.
func (o *MessageAllowedMentionsRequest) SetRepliedUser(v bool) {
	o.RepliedUser.Set(&v)
}
// SetRepliedUserNil sets the value for RepliedUser to be an explicit nil
func (o *MessageAllowedMentionsRequest) SetRepliedUserNil() {
	o.RepliedUser.Set(nil)
}

// UnsetRepliedUser ensures that no value is present for RepliedUser, not even an explicit nil
func (o *MessageAllowedMentionsRequest) UnsetRepliedUser() {
	o.RepliedUser.Unset()
}

func (o MessageAllowedMentionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageAllowedMentionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Parse != nil {
		toSerialize["parse"] = o.Parse
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.RepliedUser.IsSet() {
		toSerialize["replied_user"] = o.RepliedUser.Get()
	}
	return toSerialize, nil
}

type NullableMessageAllowedMentionsRequest struct {
	value *MessageAllowedMentionsRequest
	isSet bool
}

func (v NullableMessageAllowedMentionsRequest) Get() *MessageAllowedMentionsRequest {
	return v.value
}

func (v *NullableMessageAllowedMentionsRequest) Set(val *MessageAllowedMentionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageAllowedMentionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageAllowedMentionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageAllowedMentionsRequest(val *MessageAllowedMentionsRequest) *NullableMessageAllowedMentionsRequest {
	return &NullableMessageAllowedMentionsRequest{value: val, isSet: true}
}

func (v NullableMessageAllowedMentionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageAllowedMentionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


