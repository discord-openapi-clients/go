/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
)

// checks if the UpdateWebhookByTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWebhookByTokenRequest{}

// UpdateWebhookByTokenRequest struct for UpdateWebhookByTokenRequest
type UpdateWebhookByTokenRequest struct {
	Name *string `json:"name,omitempty"`
	Avatar NullableString `json:"avatar,omitempty"`
}

// NewUpdateWebhookByTokenRequest instantiates a new UpdateWebhookByTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhookByTokenRequest() *UpdateWebhookByTokenRequest {
	this := UpdateWebhookByTokenRequest{}
	return &this
}

// NewUpdateWebhookByTokenRequestWithDefaults instantiates a new UpdateWebhookByTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookByTokenRequestWithDefaults() *UpdateWebhookByTokenRequest {
	this := UpdateWebhookByTokenRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateWebhookByTokenRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookByTokenRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateWebhookByTokenRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateWebhookByTokenRequest) SetName(v string) {
	o.Name = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookByTokenRequest) GetAvatar() string {
	if o == nil || IsNil(o.Avatar.Get()) {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookByTokenRequest) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *UpdateWebhookByTokenRequest) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given NullableString and assigns it to the Avatar field.
func (o *UpdateWebhookByTokenRequest) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *UpdateWebhookByTokenRequest) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *UpdateWebhookByTokenRequest) UnsetAvatar() {
	o.Avatar.Unset()
}

func (o UpdateWebhookByTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWebhookByTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Avatar.IsSet() {
		toSerialize["avatar"] = o.Avatar.Get()
	}
	return toSerialize, nil
}

type NullableUpdateWebhookByTokenRequest struct {
	value *UpdateWebhookByTokenRequest
	isSet bool
}

func (v NullableUpdateWebhookByTokenRequest) Get() *UpdateWebhookByTokenRequest {
	return v.value
}

func (v *NullableUpdateWebhookByTokenRequest) Set(val *UpdateWebhookByTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhookByTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhookByTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhookByTokenRequest(val *UpdateWebhookByTokenRequest) *NullableUpdateWebhookByTokenRequest {
	return &NullableUpdateWebhookByTokenRequest{value: val, isSet: true}
}

func (v NullableUpdateWebhookByTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhookByTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


