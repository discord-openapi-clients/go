/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
	"fmt"
)

// UpdateAutoModerationRuleRequest struct for UpdateAutoModerationRuleRequest
type UpdateAutoModerationRuleRequest struct {
	DefaultKeywordListUpsertRequestPartial *DefaultKeywordListUpsertRequestPartial
	KeywordUpsertRequestPartial *KeywordUpsertRequestPartial
	MLSpamUpsertRequestPartial *MLSpamUpsertRequestPartial
	MentionSpamUpsertRequestPartial *MentionSpamUpsertRequestPartial
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *UpdateAutoModerationRuleRequest) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into DefaultKeywordListUpsertRequestPartial
	err = json.Unmarshal(data, &dst.DefaultKeywordListUpsertRequestPartial);
	if err == nil {
		jsonDefaultKeywordListUpsertRequestPartial, _ := json.Marshal(dst.DefaultKeywordListUpsertRequestPartial)
		if string(jsonDefaultKeywordListUpsertRequestPartial) == "{}" { // empty struct
			dst.DefaultKeywordListUpsertRequestPartial = nil
		} else {
			return nil // data stored in dst.DefaultKeywordListUpsertRequestPartial, return on the first match
		}
	} else {
		dst.DefaultKeywordListUpsertRequestPartial = nil
	}

	// try to unmarshal JSON data into KeywordUpsertRequestPartial
	err = json.Unmarshal(data, &dst.KeywordUpsertRequestPartial);
	if err == nil {
		jsonKeywordUpsertRequestPartial, _ := json.Marshal(dst.KeywordUpsertRequestPartial)
		if string(jsonKeywordUpsertRequestPartial) == "{}" { // empty struct
			dst.KeywordUpsertRequestPartial = nil
		} else {
			return nil // data stored in dst.KeywordUpsertRequestPartial, return on the first match
		}
	} else {
		dst.KeywordUpsertRequestPartial = nil
	}

	// try to unmarshal JSON data into MLSpamUpsertRequestPartial
	err = json.Unmarshal(data, &dst.MLSpamUpsertRequestPartial);
	if err == nil {
		jsonMLSpamUpsertRequestPartial, _ := json.Marshal(dst.MLSpamUpsertRequestPartial)
		if string(jsonMLSpamUpsertRequestPartial) == "{}" { // empty struct
			dst.MLSpamUpsertRequestPartial = nil
		} else {
			return nil // data stored in dst.MLSpamUpsertRequestPartial, return on the first match
		}
	} else {
		dst.MLSpamUpsertRequestPartial = nil
	}

	// try to unmarshal JSON data into MentionSpamUpsertRequestPartial
	err = json.Unmarshal(data, &dst.MentionSpamUpsertRequestPartial);
	if err == nil {
		jsonMentionSpamUpsertRequestPartial, _ := json.Marshal(dst.MentionSpamUpsertRequestPartial)
		if string(jsonMentionSpamUpsertRequestPartial) == "{}" { // empty struct
			dst.MentionSpamUpsertRequestPartial = nil
		} else {
			return nil // data stored in dst.MentionSpamUpsertRequestPartial, return on the first match
		}
	} else {
		dst.MentionSpamUpsertRequestPartial = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(UpdateAutoModerationRuleRequest)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *UpdateAutoModerationRuleRequest) MarshalJSON() ([]byte, error) {
	if src.DefaultKeywordListUpsertRequestPartial != nil {
		return json.Marshal(&src.DefaultKeywordListUpsertRequestPartial)
	}

	if src.KeywordUpsertRequestPartial != nil {
		return json.Marshal(&src.KeywordUpsertRequestPartial)
	}

	if src.MLSpamUpsertRequestPartial != nil {
		return json.Marshal(&src.MLSpamUpsertRequestPartial)
	}

	if src.MentionSpamUpsertRequestPartial != nil {
		return json.Marshal(&src.MentionSpamUpsertRequestPartial)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableUpdateAutoModerationRuleRequest struct {
	value *UpdateAutoModerationRuleRequest
	isSet bool
}

func (v NullableUpdateAutoModerationRuleRequest) Get() *UpdateAutoModerationRuleRequest {
	return v.value
}

func (v *NullableUpdateAutoModerationRuleRequest) Set(val *UpdateAutoModerationRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAutoModerationRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAutoModerationRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAutoModerationRuleRequest(val *UpdateAutoModerationRuleRequest) *NullableUpdateAutoModerationRuleRequest {
	return &NullableUpdateAutoModerationRuleRequest{value: val, isSet: true}
}

func (v NullableUpdateAutoModerationRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAutoModerationRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


