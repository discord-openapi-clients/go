/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RichEmbedField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RichEmbedField{}

// RichEmbedField struct for RichEmbedField
type RichEmbedField struct {
	Name string `json:"name"`
	Value string `json:"value"`
	Inline NullableBool `json:"inline,omitempty"`
}

type _RichEmbedField RichEmbedField

// NewRichEmbedField instantiates a new RichEmbedField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRichEmbedField(name string, value string) *RichEmbedField {
	this := RichEmbedField{}
	this.Name = name
	this.Value = value
	return &this
}

// NewRichEmbedFieldWithDefaults instantiates a new RichEmbedField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRichEmbedFieldWithDefaults() *RichEmbedField {
	this := RichEmbedField{}
	return &this
}

// GetName returns the Name field value
func (o *RichEmbedField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RichEmbedField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RichEmbedField) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *RichEmbedField) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *RichEmbedField) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *RichEmbedField) SetValue(v string) {
	o.Value = v
}

// GetInline returns the Inline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RichEmbedField) GetInline() bool {
	if o == nil || IsNil(o.Inline.Get()) {
		var ret bool
		return ret
	}
	return *o.Inline.Get()
}

// GetInlineOk returns a tuple with the Inline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RichEmbedField) GetInlineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inline.Get(), o.Inline.IsSet()
}

// HasInline returns a boolean if a field has been set.
func (o *RichEmbedField) HasInline() bool {
	if o != nil && o.Inline.IsSet() {
		return true
	}

	return false
}

// SetInline gets a reference to the given NullableBool and assigns it to the Inline field.
func (o *RichEmbedField) SetInline(v bool) {
	o.Inline.Set(&v)
}
// SetInlineNil sets the value for Inline to be an explicit nil
func (o *RichEmbedField) SetInlineNil() {
	o.Inline.Set(nil)
}

// UnsetInline ensures that no value is present for Inline, not even an explicit nil
func (o *RichEmbedField) UnsetInline() {
	o.Inline.Unset()
}

func (o RichEmbedField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RichEmbedField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	if o.Inline.IsSet() {
		toSerialize["inline"] = o.Inline.Get()
	}
	return toSerialize, nil
}

func (o *RichEmbedField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRichEmbedField := _RichEmbedField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRichEmbedField)

	if err != nil {
		return err
	}

	*o = RichEmbedField(varRichEmbedField)

	return err
}

type NullableRichEmbedField struct {
	value *RichEmbedField
	isSet bool
}

func (v NullableRichEmbedField) Get() *RichEmbedField {
	return v.value
}

func (v *NullableRichEmbedField) Set(val *RichEmbedField) {
	v.value = val
	v.isSet = true
}

func (v NullableRichEmbedField) IsSet() bool {
	return v.isSet
}

func (v *NullableRichEmbedField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRichEmbedField(val *RichEmbedField) *NullableRichEmbedField {
	return &NullableRichEmbedField{value: val, isSet: true}
}

func (v NullableRichEmbedField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRichEmbedField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


