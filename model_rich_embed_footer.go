/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RichEmbedFooter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RichEmbedFooter{}

// RichEmbedFooter struct for RichEmbedFooter
type RichEmbedFooter struct {
	Text NullableString `json:"text,omitempty"`
	IconUrl NullableString `json:"icon_url,omitempty"`
}

// NewRichEmbedFooter instantiates a new RichEmbedFooter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRichEmbedFooter() *RichEmbedFooter {
	this := RichEmbedFooter{}
	return &this
}

// NewRichEmbedFooterWithDefaults instantiates a new RichEmbedFooter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRichEmbedFooterWithDefaults() *RichEmbedFooter {
	this := RichEmbedFooter{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RichEmbedFooter) GetText() string {
	if o == nil || IsNil(o.Text.Get()) {
		var ret string
		return ret
	}
	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RichEmbedFooter) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// HasText returns a boolean if a field has been set.
func (o *RichEmbedFooter) HasText() bool {
	if o != nil && o.Text.IsSet() {
		return true
	}

	return false
}

// SetText gets a reference to the given NullableString and assigns it to the Text field.
func (o *RichEmbedFooter) SetText(v string) {
	o.Text.Set(&v)
}
// SetTextNil sets the value for Text to be an explicit nil
func (o *RichEmbedFooter) SetTextNil() {
	o.Text.Set(nil)
}

// UnsetText ensures that no value is present for Text, not even an explicit nil
func (o *RichEmbedFooter) UnsetText() {
	o.Text.Unset()
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RichEmbedFooter) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl.Get()) {
		var ret string
		return ret
	}
	return *o.IconUrl.Get()
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RichEmbedFooter) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IconUrl.Get(), o.IconUrl.IsSet()
}

// HasIconUrl returns a boolean if a field has been set.
func (o *RichEmbedFooter) HasIconUrl() bool {
	if o != nil && o.IconUrl.IsSet() {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given NullableString and assigns it to the IconUrl field.
func (o *RichEmbedFooter) SetIconUrl(v string) {
	o.IconUrl.Set(&v)
}
// SetIconUrlNil sets the value for IconUrl to be an explicit nil
func (o *RichEmbedFooter) SetIconUrlNil() {
	o.IconUrl.Set(nil)
}

// UnsetIconUrl ensures that no value is present for IconUrl, not even an explicit nil
func (o *RichEmbedFooter) UnsetIconUrl() {
	o.IconUrl.Unset()
}

func (o RichEmbedFooter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RichEmbedFooter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Text.IsSet() {
		toSerialize["text"] = o.Text.Get()
	}
	if o.IconUrl.IsSet() {
		toSerialize["icon_url"] = o.IconUrl.Get()
	}
	return toSerialize, nil
}

type NullableRichEmbedFooter struct {
	value *RichEmbedFooter
	isSet bool
}

func (v NullableRichEmbedFooter) Get() *RichEmbedFooter {
	return v.value
}

func (v *NullableRichEmbedFooter) Set(val *RichEmbedFooter) {
	v.value = val
	v.isSet = true
}

func (v NullableRichEmbedFooter) IsSet() bool {
	return v.isSet
}

func (v *NullableRichEmbedFooter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRichEmbedFooter(val *RichEmbedFooter) *NullableRichEmbedFooter {
	return &NullableRichEmbedFooter{value: val, isSet: true}
}

func (v NullableRichEmbedFooter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRichEmbedFooter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


