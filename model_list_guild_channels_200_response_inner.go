/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ListGuildChannels200ResponseInner - struct for ListGuildChannels200ResponseInner
type ListGuildChannels200ResponseInner struct {
	GuildChannelResponse *GuildChannelResponse
	PrivateChannelResponse *PrivateChannelResponse
	PrivateGroupChannelResponse *PrivateGroupChannelResponse
	ThreadResponse *ThreadResponse
}

// GuildChannelResponseAsListGuildChannels200ResponseInner is a convenience function that returns GuildChannelResponse wrapped in ListGuildChannels200ResponseInner
func GuildChannelResponseAsListGuildChannels200ResponseInner(v *GuildChannelResponse) ListGuildChannels200ResponseInner {
	return ListGuildChannels200ResponseInner{
		GuildChannelResponse: v,
	}
}

// PrivateChannelResponseAsListGuildChannels200ResponseInner is a convenience function that returns PrivateChannelResponse wrapped in ListGuildChannels200ResponseInner
func PrivateChannelResponseAsListGuildChannels200ResponseInner(v *PrivateChannelResponse) ListGuildChannels200ResponseInner {
	return ListGuildChannels200ResponseInner{
		PrivateChannelResponse: v,
	}
}

// PrivateGroupChannelResponseAsListGuildChannels200ResponseInner is a convenience function that returns PrivateGroupChannelResponse wrapped in ListGuildChannels200ResponseInner
func PrivateGroupChannelResponseAsListGuildChannels200ResponseInner(v *PrivateGroupChannelResponse) ListGuildChannels200ResponseInner {
	return ListGuildChannels200ResponseInner{
		PrivateGroupChannelResponse: v,
	}
}

// ThreadResponseAsListGuildChannels200ResponseInner is a convenience function that returns ThreadResponse wrapped in ListGuildChannels200ResponseInner
func ThreadResponseAsListGuildChannels200ResponseInner(v *ThreadResponse) ListGuildChannels200ResponseInner {
	return ListGuildChannels200ResponseInner{
		ThreadResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListGuildChannels200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GuildChannelResponse
	err = newStrictDecoder(data).Decode(&dst.GuildChannelResponse)
	if err == nil {
		jsonGuildChannelResponse, _ := json.Marshal(dst.GuildChannelResponse)
		if string(jsonGuildChannelResponse) == "{}" { // empty struct
			dst.GuildChannelResponse = nil
		} else {
			if err = validator.Validate(dst.GuildChannelResponse); err != nil {
				dst.GuildChannelResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.GuildChannelResponse = nil
	}

	// try to unmarshal data into PrivateChannelResponse
	err = newStrictDecoder(data).Decode(&dst.PrivateChannelResponse)
	if err == nil {
		jsonPrivateChannelResponse, _ := json.Marshal(dst.PrivateChannelResponse)
		if string(jsonPrivateChannelResponse) == "{}" { // empty struct
			dst.PrivateChannelResponse = nil
		} else {
			if err = validator.Validate(dst.PrivateChannelResponse); err != nil {
				dst.PrivateChannelResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.PrivateChannelResponse = nil
	}

	// try to unmarshal data into PrivateGroupChannelResponse
	err = newStrictDecoder(data).Decode(&dst.PrivateGroupChannelResponse)
	if err == nil {
		jsonPrivateGroupChannelResponse, _ := json.Marshal(dst.PrivateGroupChannelResponse)
		if string(jsonPrivateGroupChannelResponse) == "{}" { // empty struct
			dst.PrivateGroupChannelResponse = nil
		} else {
			if err = validator.Validate(dst.PrivateGroupChannelResponse); err != nil {
				dst.PrivateGroupChannelResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.PrivateGroupChannelResponse = nil
	}

	// try to unmarshal data into ThreadResponse
	err = newStrictDecoder(data).Decode(&dst.ThreadResponse)
	if err == nil {
		jsonThreadResponse, _ := json.Marshal(dst.ThreadResponse)
		if string(jsonThreadResponse) == "{}" { // empty struct
			dst.ThreadResponse = nil
		} else {
			if err = validator.Validate(dst.ThreadResponse); err != nil {
				dst.ThreadResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.ThreadResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GuildChannelResponse = nil
		dst.PrivateChannelResponse = nil
		dst.PrivateGroupChannelResponse = nil
		dst.ThreadResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListGuildChannels200ResponseInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListGuildChannels200ResponseInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListGuildChannels200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.GuildChannelResponse != nil {
		return json.Marshal(&src.GuildChannelResponse)
	}

	if src.PrivateChannelResponse != nil {
		return json.Marshal(&src.PrivateChannelResponse)
	}

	if src.PrivateGroupChannelResponse != nil {
		return json.Marshal(&src.PrivateGroupChannelResponse)
	}

	if src.ThreadResponse != nil {
		return json.Marshal(&src.ThreadResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListGuildChannels200ResponseInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GuildChannelResponse != nil {
		return obj.GuildChannelResponse
	}

	if obj.PrivateChannelResponse != nil {
		return obj.PrivateChannelResponse
	}

	if obj.PrivateGroupChannelResponse != nil {
		return obj.PrivateGroupChannelResponse
	}

	if obj.ThreadResponse != nil {
		return obj.ThreadResponse
	}

	// all schemas are nil
	return nil
}

type NullableListGuildChannels200ResponseInner struct {
	value *ListGuildChannels200ResponseInner
	isSet bool
}

func (v NullableListGuildChannels200ResponseInner) Get() *ListGuildChannels200ResponseInner {
	return v.value
}

func (v *NullableListGuildChannels200ResponseInner) Set(val *ListGuildChannels200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListGuildChannels200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListGuildChannels200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListGuildChannels200ResponseInner(val *ListGuildChannels200ResponseInner) *NullableListGuildChannels200ResponseInner {
	return &NullableListGuildChannels200ResponseInner{value: val, isSet: true}
}

func (v NullableListGuildChannels200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListGuildChannels200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


