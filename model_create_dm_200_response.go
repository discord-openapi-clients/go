/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateDm200Response - struct for CreateDm200Response
type CreateDm200Response struct {
	PrivateChannelResponse *PrivateChannelResponse
	PrivateGroupChannelResponse *PrivateGroupChannelResponse
}

// PrivateChannelResponseAsCreateDm200Response is a convenience function that returns PrivateChannelResponse wrapped in CreateDm200Response
func PrivateChannelResponseAsCreateDm200Response(v *PrivateChannelResponse) CreateDm200Response {
	return CreateDm200Response{
		PrivateChannelResponse: v,
	}
}

// PrivateGroupChannelResponseAsCreateDm200Response is a convenience function that returns PrivateGroupChannelResponse wrapped in CreateDm200Response
func PrivateGroupChannelResponseAsCreateDm200Response(v *PrivateGroupChannelResponse) CreateDm200Response {
	return CreateDm200Response{
		PrivateGroupChannelResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateDm200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PrivateChannelResponse
	err = newStrictDecoder(data).Decode(&dst.PrivateChannelResponse)
	if err == nil {
		jsonPrivateChannelResponse, _ := json.Marshal(dst.PrivateChannelResponse)
		if string(jsonPrivateChannelResponse) == "{}" { // empty struct
			dst.PrivateChannelResponse = nil
		} else {
			if err = validator.Validate(dst.PrivateChannelResponse); err != nil {
				dst.PrivateChannelResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.PrivateChannelResponse = nil
	}

	// try to unmarshal data into PrivateGroupChannelResponse
	err = newStrictDecoder(data).Decode(&dst.PrivateGroupChannelResponse)
	if err == nil {
		jsonPrivateGroupChannelResponse, _ := json.Marshal(dst.PrivateGroupChannelResponse)
		if string(jsonPrivateGroupChannelResponse) == "{}" { // empty struct
			dst.PrivateGroupChannelResponse = nil
		} else {
			if err = validator.Validate(dst.PrivateGroupChannelResponse); err != nil {
				dst.PrivateGroupChannelResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.PrivateGroupChannelResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PrivateChannelResponse = nil
		dst.PrivateGroupChannelResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateDm200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateDm200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateDm200Response) MarshalJSON() ([]byte, error) {
	if src.PrivateChannelResponse != nil {
		return json.Marshal(&src.PrivateChannelResponse)
	}

	if src.PrivateGroupChannelResponse != nil {
		return json.Marshal(&src.PrivateGroupChannelResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateDm200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PrivateChannelResponse != nil {
		return obj.PrivateChannelResponse
	}

	if obj.PrivateGroupChannelResponse != nil {
		return obj.PrivateGroupChannelResponse
	}

	// all schemas are nil
	return nil
}

type NullableCreateDm200Response struct {
	value *CreateDm200Response
	isSet bool
}

func (v NullableCreateDm200Response) Get() *CreateDm200Response {
	return v.value
}

func (v *NullableCreateDm200Response) Set(val *CreateDm200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDm200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDm200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDm200Response(val *CreateDm200Response) *NullableCreateDm200Response {
	return &NullableCreateDm200Response{value: val, isSet: true}
}

func (v NullableCreateDm200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDm200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


