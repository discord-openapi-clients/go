/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// MentionableSelectDefaultValuesInner - struct for MentionableSelectDefaultValuesInner
type MentionableSelectDefaultValuesInner struct {
	RoleSelectDefaultValue *RoleSelectDefaultValue
	UserSelectDefaultValue *UserSelectDefaultValue
}

// RoleSelectDefaultValueAsMentionableSelectDefaultValuesInner is a convenience function that returns RoleSelectDefaultValue wrapped in MentionableSelectDefaultValuesInner
func RoleSelectDefaultValueAsMentionableSelectDefaultValuesInner(v *RoleSelectDefaultValue) MentionableSelectDefaultValuesInner {
	return MentionableSelectDefaultValuesInner{
		RoleSelectDefaultValue: v,
	}
}

// UserSelectDefaultValueAsMentionableSelectDefaultValuesInner is a convenience function that returns UserSelectDefaultValue wrapped in MentionableSelectDefaultValuesInner
func UserSelectDefaultValueAsMentionableSelectDefaultValuesInner(v *UserSelectDefaultValue) MentionableSelectDefaultValuesInner {
	return MentionableSelectDefaultValuesInner{
		UserSelectDefaultValue: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MentionableSelectDefaultValuesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RoleSelectDefaultValue
	err = newStrictDecoder(data).Decode(&dst.RoleSelectDefaultValue)
	if err == nil {
		jsonRoleSelectDefaultValue, _ := json.Marshal(dst.RoleSelectDefaultValue)
		if string(jsonRoleSelectDefaultValue) == "{}" { // empty struct
			dst.RoleSelectDefaultValue = nil
		} else {
			if err = validator.Validate(dst.RoleSelectDefaultValue); err != nil {
				dst.RoleSelectDefaultValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.RoleSelectDefaultValue = nil
	}

	// try to unmarshal data into UserSelectDefaultValue
	err = newStrictDecoder(data).Decode(&dst.UserSelectDefaultValue)
	if err == nil {
		jsonUserSelectDefaultValue, _ := json.Marshal(dst.UserSelectDefaultValue)
		if string(jsonUserSelectDefaultValue) == "{}" { // empty struct
			dst.UserSelectDefaultValue = nil
		} else {
			if err = validator.Validate(dst.UserSelectDefaultValue); err != nil {
				dst.UserSelectDefaultValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserSelectDefaultValue = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RoleSelectDefaultValue = nil
		dst.UserSelectDefaultValue = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MentionableSelectDefaultValuesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MentionableSelectDefaultValuesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MentionableSelectDefaultValuesInner) MarshalJSON() ([]byte, error) {
	if src.RoleSelectDefaultValue != nil {
		return json.Marshal(&src.RoleSelectDefaultValue)
	}

	if src.UserSelectDefaultValue != nil {
		return json.Marshal(&src.UserSelectDefaultValue)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MentionableSelectDefaultValuesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RoleSelectDefaultValue != nil {
		return obj.RoleSelectDefaultValue
	}

	if obj.UserSelectDefaultValue != nil {
		return obj.UserSelectDefaultValue
	}

	// all schemas are nil
	return nil
}

type NullableMentionableSelectDefaultValuesInner struct {
	value *MentionableSelectDefaultValuesInner
	isSet bool
}

func (v NullableMentionableSelectDefaultValuesInner) Get() *MentionableSelectDefaultValuesInner {
	return v.value
}

func (v *NullableMentionableSelectDefaultValuesInner) Set(val *MentionableSelectDefaultValuesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMentionableSelectDefaultValuesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMentionableSelectDefaultValuesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMentionableSelectDefaultValuesInner(val *MentionableSelectDefaultValuesInner) *NullableMentionableSelectDefaultValuesInner {
	return &NullableMentionableSelectDefaultValuesInner{value: val, isSet: true}
}

func (v NullableMentionableSelectDefaultValuesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMentionableSelectDefaultValuesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


