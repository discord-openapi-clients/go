/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PurchaseNotificationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseNotificationResponse{}

// PurchaseNotificationResponse struct for PurchaseNotificationResponse
type PurchaseNotificationResponse struct {
	Type PurchaseType `json:"type"`
	GuildProductPurchase NullableGuildProductPurchaseResponse `json:"guild_product_purchase,omitempty"`
}

type _PurchaseNotificationResponse PurchaseNotificationResponse

// NewPurchaseNotificationResponse instantiates a new PurchaseNotificationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseNotificationResponse(type_ PurchaseType) *PurchaseNotificationResponse {
	this := PurchaseNotificationResponse{}
	this.Type = type_
	return &this
}

// NewPurchaseNotificationResponseWithDefaults instantiates a new PurchaseNotificationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseNotificationResponseWithDefaults() *PurchaseNotificationResponse {
	this := PurchaseNotificationResponse{}
	return &this
}

// GetType returns the Type field value
func (o *PurchaseNotificationResponse) GetType() PurchaseType {
	if o == nil {
		var ret PurchaseType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PurchaseNotificationResponse) GetTypeOk() (*PurchaseType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PurchaseNotificationResponse) SetType(v PurchaseType) {
	o.Type = v
}

// GetGuildProductPurchase returns the GuildProductPurchase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseNotificationResponse) GetGuildProductPurchase() GuildProductPurchaseResponse {
	if o == nil || IsNil(o.GuildProductPurchase.Get()) {
		var ret GuildProductPurchaseResponse
		return ret
	}
	return *o.GuildProductPurchase.Get()
}

// GetGuildProductPurchaseOk returns a tuple with the GuildProductPurchase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseNotificationResponse) GetGuildProductPurchaseOk() (*GuildProductPurchaseResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.GuildProductPurchase.Get(), o.GuildProductPurchase.IsSet()
}

// HasGuildProductPurchase returns a boolean if a field has been set.
func (o *PurchaseNotificationResponse) HasGuildProductPurchase() bool {
	if o != nil && o.GuildProductPurchase.IsSet() {
		return true
	}

	return false
}

// SetGuildProductPurchase gets a reference to the given NullableGuildProductPurchaseResponse and assigns it to the GuildProductPurchase field.
func (o *PurchaseNotificationResponse) SetGuildProductPurchase(v GuildProductPurchaseResponse) {
	o.GuildProductPurchase.Set(&v)
}
// SetGuildProductPurchaseNil sets the value for GuildProductPurchase to be an explicit nil
func (o *PurchaseNotificationResponse) SetGuildProductPurchaseNil() {
	o.GuildProductPurchase.Set(nil)
}

// UnsetGuildProductPurchase ensures that no value is present for GuildProductPurchase, not even an explicit nil
func (o *PurchaseNotificationResponse) UnsetGuildProductPurchase() {
	o.GuildProductPurchase.Unset()
}

func (o PurchaseNotificationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseNotificationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if o.GuildProductPurchase.IsSet() {
		toSerialize["guild_product_purchase"] = o.GuildProductPurchase.Get()
	}
	return toSerialize, nil
}

func (o *PurchaseNotificationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPurchaseNotificationResponse := _PurchaseNotificationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPurchaseNotificationResponse)

	if err != nil {
		return err
	}

	*o = PurchaseNotificationResponse(varPurchaseNotificationResponse)

	return err
}

type NullablePurchaseNotificationResponse struct {
	value *PurchaseNotificationResponse
	isSet bool
}

func (v NullablePurchaseNotificationResponse) Get() *PurchaseNotificationResponse {
	return v.value
}

func (v *NullablePurchaseNotificationResponse) Set(val *PurchaseNotificationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseNotificationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseNotificationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseNotificationResponse(val *PurchaseNotificationResponse) *NullablePurchaseNotificationResponse {
	return &NullablePurchaseNotificationResponse{value: val, isSet: true}
}

func (v NullablePurchaseNotificationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseNotificationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


