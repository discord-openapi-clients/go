/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoleSelectDefaultValueResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleSelectDefaultValueResponse{}

// RoleSelectDefaultValueResponse struct for RoleSelectDefaultValueResponse
type RoleSelectDefaultValueResponse struct {
	Type SnowflakeSelectDefaultValueTypes `json:"type"`
	Id string `json:"id" validate:"regexp=^(0|[1-9][0-9]*)$"`
}

type _RoleSelectDefaultValueResponse RoleSelectDefaultValueResponse

// NewRoleSelectDefaultValueResponse instantiates a new RoleSelectDefaultValueResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleSelectDefaultValueResponse(type_ SnowflakeSelectDefaultValueTypes, id string) *RoleSelectDefaultValueResponse {
	this := RoleSelectDefaultValueResponse{}
	this.Type = type_
	this.Id = id
	return &this
}

// NewRoleSelectDefaultValueResponseWithDefaults instantiates a new RoleSelectDefaultValueResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleSelectDefaultValueResponseWithDefaults() *RoleSelectDefaultValueResponse {
	this := RoleSelectDefaultValueResponse{}
	return &this
}

// GetType returns the Type field value
func (o *RoleSelectDefaultValueResponse) GetType() SnowflakeSelectDefaultValueTypes {
	if o == nil {
		var ret SnowflakeSelectDefaultValueTypes
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RoleSelectDefaultValueResponse) GetTypeOk() (*SnowflakeSelectDefaultValueTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RoleSelectDefaultValueResponse) SetType(v SnowflakeSelectDefaultValueTypes) {
	o.Type = v
}

// GetId returns the Id field value
func (o *RoleSelectDefaultValueResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RoleSelectDefaultValueResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RoleSelectDefaultValueResponse) SetId(v string) {
	o.Id = v
}

func (o RoleSelectDefaultValueResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleSelectDefaultValueResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *RoleSelectDefaultValueResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleSelectDefaultValueResponse := _RoleSelectDefaultValueResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleSelectDefaultValueResponse)

	if err != nil {
		return err
	}

	*o = RoleSelectDefaultValueResponse(varRoleSelectDefaultValueResponse)

	return err
}

type NullableRoleSelectDefaultValueResponse struct {
	value *RoleSelectDefaultValueResponse
	isSet bool
}

func (v NullableRoleSelectDefaultValueResponse) Get() *RoleSelectDefaultValueResponse {
	return v.value
}

func (v *NullableRoleSelectDefaultValueResponse) Set(val *RoleSelectDefaultValueResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleSelectDefaultValueResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleSelectDefaultValueResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleSelectDefaultValueResponse(val *RoleSelectDefaultValueResponse) *NullableRoleSelectDefaultValueResponse {
	return &NullableRoleSelectDefaultValueResponse{value: val, isSet: true}
}

func (v NullableRoleSelectDefaultValueResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleSelectDefaultValueResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


