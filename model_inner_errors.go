/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InnerErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InnerErrors{}

// InnerErrors struct for InnerErrors
type InnerErrors struct {
	// The list of errors for this field
	Errors []Error `json:"_errors"`
}

type _InnerErrors InnerErrors

// NewInnerErrors instantiates a new InnerErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInnerErrors(errors []Error) *InnerErrors {
	this := InnerErrors{}
	this.Errors = errors
	return &this
}

// NewInnerErrorsWithDefaults instantiates a new InnerErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInnerErrorsWithDefaults() *InnerErrors {
	this := InnerErrors{}
	return &this
}

// GetErrors returns the Errors field value
func (o *InnerErrors) GetErrors() []Error {
	if o == nil {
		var ret []Error
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *InnerErrors) GetErrorsOk() ([]Error, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *InnerErrors) SetErrors(v []Error) {
	o.Errors = v
}

func (o InnerErrors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InnerErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_errors"] = o.Errors
	return toSerialize, nil
}

func (o *InnerErrors) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInnerErrors := _InnerErrors{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInnerErrors)

	if err != nil {
		return err
	}

	*o = InnerErrors(varInnerErrors)

	return err
}

type NullableInnerErrors struct {
	value *InnerErrors
	isSet bool
}

func (v NullableInnerErrors) Get() *InnerErrors {
	return v.value
}

func (v *NullableInnerErrors) Set(val *InnerErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableInnerErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableInnerErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInnerErrors(val *InnerErrors) *NullableInnerErrors {
	return &NullableInnerErrors{value: val, isSet: true}
}

func (v NullableInnerErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInnerErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


