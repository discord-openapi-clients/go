/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PollResultsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PollResultsResponse{}

// PollResultsResponse struct for PollResultsResponse
type PollResultsResponse struct {
	AnswerCounts []PollResultsEntryResponse `json:"answer_counts,omitempty"`
	IsFinalized bool `json:"is_finalized"`
}

type _PollResultsResponse PollResultsResponse

// NewPollResultsResponse instantiates a new PollResultsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPollResultsResponse(isFinalized bool) *PollResultsResponse {
	this := PollResultsResponse{}
	this.IsFinalized = isFinalized
	return &this
}

// NewPollResultsResponseWithDefaults instantiates a new PollResultsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPollResultsResponseWithDefaults() *PollResultsResponse {
	this := PollResultsResponse{}
	return &this
}

// GetAnswerCounts returns the AnswerCounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PollResultsResponse) GetAnswerCounts() []PollResultsEntryResponse {
	if o == nil {
		var ret []PollResultsEntryResponse
		return ret
	}
	return o.AnswerCounts
}

// GetAnswerCountsOk returns a tuple with the AnswerCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PollResultsResponse) GetAnswerCountsOk() ([]PollResultsEntryResponse, bool) {
	if o == nil || IsNil(o.AnswerCounts) {
		return nil, false
	}
	return o.AnswerCounts, true
}

// HasAnswerCounts returns a boolean if a field has been set.
func (o *PollResultsResponse) HasAnswerCounts() bool {
	if o != nil && !IsNil(o.AnswerCounts) {
		return true
	}

	return false
}

// SetAnswerCounts gets a reference to the given []PollResultsEntryResponse and assigns it to the AnswerCounts field.
func (o *PollResultsResponse) SetAnswerCounts(v []PollResultsEntryResponse) {
	o.AnswerCounts = v
}

// GetIsFinalized returns the IsFinalized field value
func (o *PollResultsResponse) GetIsFinalized() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFinalized
}

// GetIsFinalizedOk returns a tuple with the IsFinalized field value
// and a boolean to check if the value has been set.
func (o *PollResultsResponse) GetIsFinalizedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFinalized, true
}

// SetIsFinalized sets field value
func (o *PollResultsResponse) SetIsFinalized(v bool) {
	o.IsFinalized = v
}

func (o PollResultsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PollResultsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AnswerCounts != nil {
		toSerialize["answer_counts"] = o.AnswerCounts
	}
	toSerialize["is_finalized"] = o.IsFinalized
	return toSerialize, nil
}

func (o *PollResultsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_finalized",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPollResultsResponse := _PollResultsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPollResultsResponse)

	if err != nil {
		return err
	}

	*o = PollResultsResponse(varPollResultsResponse)

	return err
}

type NullablePollResultsResponse struct {
	value *PollResultsResponse
	isSet bool
}

func (v NullablePollResultsResponse) Get() *PollResultsResponse {
	return v.value
}

func (v *NullablePollResultsResponse) Set(val *PollResultsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePollResultsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePollResultsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePollResultsResponse(val *PollResultsResponse) *NullablePollResultsResponse {
	return &NullablePollResultsResponse{value: val, isSet: true}
}

func (v NullablePollResultsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePollResultsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


