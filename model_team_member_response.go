/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TeamMemberResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamMemberResponse{}

// TeamMemberResponse struct for TeamMemberResponse
type TeamMemberResponse struct {
	User UserResponse `json:"user"`
	TeamId string `json:"team_id" validate:"regexp=^(0|[1-9][0-9]*)$"`
	MembershipState TeamMembershipStates `json:"membership_state"`
}

type _TeamMemberResponse TeamMemberResponse

// NewTeamMemberResponse instantiates a new TeamMemberResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamMemberResponse(user UserResponse, teamId string, membershipState TeamMembershipStates) *TeamMemberResponse {
	this := TeamMemberResponse{}
	this.User = user
	this.TeamId = teamId
	this.MembershipState = membershipState
	return &this
}

// NewTeamMemberResponseWithDefaults instantiates a new TeamMemberResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamMemberResponseWithDefaults() *TeamMemberResponse {
	this := TeamMemberResponse{}
	return &this
}

// GetUser returns the User field value
func (o *TeamMemberResponse) GetUser() UserResponse {
	if o == nil {
		var ret UserResponse
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *TeamMemberResponse) GetUserOk() (*UserResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *TeamMemberResponse) SetUser(v UserResponse) {
	o.User = v
}

// GetTeamId returns the TeamId field value
func (o *TeamMemberResponse) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *TeamMemberResponse) GetTeamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *TeamMemberResponse) SetTeamId(v string) {
	o.TeamId = v
}

// GetMembershipState returns the MembershipState field value
func (o *TeamMemberResponse) GetMembershipState() TeamMembershipStates {
	if o == nil {
		var ret TeamMembershipStates
		return ret
	}

	return o.MembershipState
}

// GetMembershipStateOk returns a tuple with the MembershipState field value
// and a boolean to check if the value has been set.
func (o *TeamMemberResponse) GetMembershipStateOk() (*TeamMembershipStates, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MembershipState, true
}

// SetMembershipState sets field value
func (o *TeamMemberResponse) SetMembershipState(v TeamMembershipStates) {
	o.MembershipState = v
}

func (o TeamMemberResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamMemberResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["team_id"] = o.TeamId
	toSerialize["membership_state"] = o.MembershipState
	return toSerialize, nil
}

func (o *TeamMemberResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
		"team_id",
		"membership_state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamMemberResponse := _TeamMemberResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeamMemberResponse)

	if err != nil {
		return err
	}

	*o = TeamMemberResponse(varTeamMemberResponse)

	return err
}

type NullableTeamMemberResponse struct {
	value *TeamMemberResponse
	isSet bool
}

func (v NullableTeamMemberResponse) Get() *TeamMemberResponse {
	return v.value
}

func (v *NullableTeamMemberResponse) Set(val *TeamMemberResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMemberResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMemberResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMemberResponse(val *TeamMemberResponse) *NullableTeamMemberResponse {
	return &NullableTeamMemberResponse{value: val, isSet: true}
}

func (v NullableTeamMemberResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMemberResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


