/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
	"fmt"
)

// ExecuteWebhookRequest struct for ExecuteWebhookRequest
type ExecuteWebhookRequest struct {
	IncomingWebhookRequestPartial *IncomingWebhookRequestPartial
	IncomingWebhookUpdateRequestPartial *IncomingWebhookUpdateRequestPartial
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ExecuteWebhookRequest) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into IncomingWebhookRequestPartial
	err = json.Unmarshal(data, &dst.IncomingWebhookRequestPartial);
	if err == nil {
		jsonIncomingWebhookRequestPartial, _ := json.Marshal(dst.IncomingWebhookRequestPartial)
		if string(jsonIncomingWebhookRequestPartial) == "{}" { // empty struct
			dst.IncomingWebhookRequestPartial = nil
		} else {
			return nil // data stored in dst.IncomingWebhookRequestPartial, return on the first match
		}
	} else {
		dst.IncomingWebhookRequestPartial = nil
	}

	// try to unmarshal JSON data into IncomingWebhookUpdateRequestPartial
	err = json.Unmarshal(data, &dst.IncomingWebhookUpdateRequestPartial);
	if err == nil {
		jsonIncomingWebhookUpdateRequestPartial, _ := json.Marshal(dst.IncomingWebhookUpdateRequestPartial)
		if string(jsonIncomingWebhookUpdateRequestPartial) == "{}" { // empty struct
			dst.IncomingWebhookUpdateRequestPartial = nil
		} else {
			return nil // data stored in dst.IncomingWebhookUpdateRequestPartial, return on the first match
		}
	} else {
		dst.IncomingWebhookUpdateRequestPartial = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ExecuteWebhookRequest)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ExecuteWebhookRequest) MarshalJSON() ([]byte, error) {
	if src.IncomingWebhookRequestPartial != nil {
		return json.Marshal(&src.IncomingWebhookRequestPartial)
	}

	if src.IncomingWebhookUpdateRequestPartial != nil {
		return json.Marshal(&src.IncomingWebhookUpdateRequestPartial)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableExecuteWebhookRequest struct {
	value *ExecuteWebhookRequest
	isSet bool
}

func (v NullableExecuteWebhookRequest) Get() *ExecuteWebhookRequest {
	return v.value
}

func (v *NullableExecuteWebhookRequest) Set(val *ExecuteWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteWebhookRequest(val *ExecuteWebhookRequest) *NullableExecuteWebhookRequest {
	return &NullableExecuteWebhookRequest{value: val, isSet: true}
}

func (v NullableExecuteWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


