/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GuildMFALevelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GuildMFALevelResponse{}

// GuildMFALevelResponse struct for GuildMFALevelResponse
type GuildMFALevelResponse struct {
	Level GuildMFALevel `json:"level"`
}

type _GuildMFALevelResponse GuildMFALevelResponse

// NewGuildMFALevelResponse instantiates a new GuildMFALevelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGuildMFALevelResponse(level GuildMFALevel) *GuildMFALevelResponse {
	this := GuildMFALevelResponse{}
	this.Level = level
	return &this
}

// NewGuildMFALevelResponseWithDefaults instantiates a new GuildMFALevelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGuildMFALevelResponseWithDefaults() *GuildMFALevelResponse {
	this := GuildMFALevelResponse{}
	return &this
}

// GetLevel returns the Level field value
func (o *GuildMFALevelResponse) GetLevel() GuildMFALevel {
	if o == nil {
		var ret GuildMFALevel
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *GuildMFALevelResponse) GetLevelOk() (*GuildMFALevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *GuildMFALevelResponse) SetLevel(v GuildMFALevel) {
	o.Level = v
}

func (o GuildMFALevelResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GuildMFALevelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["level"] = o.Level
	return toSerialize, nil
}

func (o *GuildMFALevelResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"level",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGuildMFALevelResponse := _GuildMFALevelResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGuildMFALevelResponse)

	if err != nil {
		return err
	}

	*o = GuildMFALevelResponse(varGuildMFALevelResponse)

	return err
}

type NullableGuildMFALevelResponse struct {
	value *GuildMFALevelResponse
	isSet bool
}

func (v NullableGuildMFALevelResponse) Get() *GuildMFALevelResponse {
	return v.value
}

func (v *NullableGuildMFALevelResponse) Set(val *GuildMFALevelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGuildMFALevelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGuildMFALevelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGuildMFALevelResponse(val *GuildMFALevelResponse) *NullableGuildMFALevelResponse {
	return &NullableGuildMFALevelResponse{value: val, isSet: true}
}

func (v NullableGuildMFALevelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGuildMFALevelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


