/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package discord

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListApplicationEmojisResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListApplicationEmojisResponse{}

// ListApplicationEmojisResponse struct for ListApplicationEmojisResponse
type ListApplicationEmojisResponse struct {
	Items []EmojiResponse `json:"items"`
}

type _ListApplicationEmojisResponse ListApplicationEmojisResponse

// NewListApplicationEmojisResponse instantiates a new ListApplicationEmojisResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListApplicationEmojisResponse(items []EmojiResponse) *ListApplicationEmojisResponse {
	this := ListApplicationEmojisResponse{}
	this.Items = items
	return &this
}

// NewListApplicationEmojisResponseWithDefaults instantiates a new ListApplicationEmojisResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListApplicationEmojisResponseWithDefaults() *ListApplicationEmojisResponse {
	this := ListApplicationEmojisResponse{}
	return &this
}

// GetItems returns the Items field value
func (o *ListApplicationEmojisResponse) GetItems() []EmojiResponse {
	if o == nil {
		var ret []EmojiResponse
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ListApplicationEmojisResponse) GetItemsOk() ([]EmojiResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ListApplicationEmojisResponse) SetItems(v []EmojiResponse) {
	o.Items = v
}

func (o ListApplicationEmojisResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListApplicationEmojisResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *ListApplicationEmojisResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListApplicationEmojisResponse := _ListApplicationEmojisResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListApplicationEmojisResponse)

	if err != nil {
		return err
	}

	*o = ListApplicationEmojisResponse(varListApplicationEmojisResponse)

	return err
}

type NullableListApplicationEmojisResponse struct {
	value *ListApplicationEmojisResponse
	isSet bool
}

func (v NullableListApplicationEmojisResponse) Get() *ListApplicationEmojisResponse {
	return v.value
}

func (v *NullableListApplicationEmojisResponse) Set(val *ListApplicationEmojisResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListApplicationEmojisResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListApplicationEmojisResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListApplicationEmojisResponse(val *ListApplicationEmojisResponse) *NullableListApplicationEmojisResponse {
	return &NullableListApplicationEmojisResponse{value: val, isSet: true}
}

func (v NullableListApplicationEmojisResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListApplicationEmojisResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


