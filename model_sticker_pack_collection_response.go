/*
Discord HTTP API (Preview)

Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.

API version: 10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StickerPackCollectionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StickerPackCollectionResponse{}

// StickerPackCollectionResponse struct for StickerPackCollectionResponse
type StickerPackCollectionResponse struct {
	StickerPacks []StickerPackResponse `json:"sticker_packs"`
}

type _StickerPackCollectionResponse StickerPackCollectionResponse

// NewStickerPackCollectionResponse instantiates a new StickerPackCollectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStickerPackCollectionResponse(stickerPacks []StickerPackResponse) *StickerPackCollectionResponse {
	this := StickerPackCollectionResponse{}
	this.StickerPacks = stickerPacks
	return &this
}

// NewStickerPackCollectionResponseWithDefaults instantiates a new StickerPackCollectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStickerPackCollectionResponseWithDefaults() *StickerPackCollectionResponse {
	this := StickerPackCollectionResponse{}
	return &this
}

// GetStickerPacks returns the StickerPacks field value
func (o *StickerPackCollectionResponse) GetStickerPacks() []StickerPackResponse {
	if o == nil {
		var ret []StickerPackResponse
		return ret
	}

	return o.StickerPacks
}

// GetStickerPacksOk returns a tuple with the StickerPacks field value
// and a boolean to check if the value has been set.
func (o *StickerPackCollectionResponse) GetStickerPacksOk() ([]StickerPackResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.StickerPacks, true
}

// SetStickerPacks sets field value
func (o *StickerPackCollectionResponse) SetStickerPacks(v []StickerPackResponse) {
	o.StickerPacks = v
}

func (o StickerPackCollectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StickerPackCollectionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sticker_packs"] = o.StickerPacks
	return toSerialize, nil
}

func (o *StickerPackCollectionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sticker_packs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStickerPackCollectionResponse := _StickerPackCollectionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStickerPackCollectionResponse)

	if err != nil {
		return err
	}

	*o = StickerPackCollectionResponse(varStickerPackCollectionResponse)

	return err
}

type NullableStickerPackCollectionResponse struct {
	value *StickerPackCollectionResponse
	isSet bool
}

func (v NullableStickerPackCollectionResponse) Get() *StickerPackCollectionResponse {
	return v.value
}

func (v *NullableStickerPackCollectionResponse) Set(val *StickerPackCollectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStickerPackCollectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStickerPackCollectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStickerPackCollectionResponse(val *StickerPackCollectionResponse) *NullableStickerPackCollectionResponse {
	return &NullableStickerPackCollectionResponse{value: val, isSet: true}
}

func (v NullableStickerPackCollectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStickerPackCollectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


