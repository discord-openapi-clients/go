/*
Discord HTTP API (Preview)

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package discord

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/discord-openapi-clients/go/v1"
)

func Test_discord_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService AddGroupDmUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var userId string

		resp, httpRes, err := apiClient.DefaultAPI.AddGroupDmUser(context.Background(), channelId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AddGuildMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string

		resp, httpRes, err := apiClient.DefaultAPI.AddGuildMember(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AddGuildMemberRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string
		var roleId string

		httpRes, err := apiClient.DefaultAPI.AddGuildMemberRole(context.Background(), guildId, userId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AddMyMessageReaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string
		var emojiName string

		httpRes, err := apiClient.DefaultAPI.AddMyMessageReaction(context.Background(), channelId, messageId, emojiName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AddThreadMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var userId string

		httpRes, err := apiClient.DefaultAPI.AddThreadMember(context.Background(), channelId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BanUserFromGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string

		httpRes, err := apiClient.DefaultAPI.BanUserFromGuild(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BulkBanUsersFromGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.BulkBanUsersFromGuild(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BulkDeleteMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.DefaultAPI.BulkDeleteMessages(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BulkSetApplicationCommands", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.BulkSetApplicationCommands(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BulkSetGuildApplicationCommands", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.BulkSetGuildApplicationCommands(context.Background(), applicationId, guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BulkUpdateGuildChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		httpRes, err := apiClient.DefaultAPI.BulkUpdateGuildChannels(context.Background(), guildId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BulkUpdateGuildRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.BulkUpdateGuildRoles(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConsumeEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var entitlementId string

		httpRes, err := apiClient.DefaultAPI.ConsumeEntitlement(context.Background(), applicationId, entitlementId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateApplicationCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateApplicationCommand(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateApplicationEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateApplicationEmoji(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateAutoModerationRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateAutoModerationRule(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateChannelInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateChannelInvite(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateDm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateDm(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateEntitlement(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuild(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuildApplicationCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuildApplicationCommand(context.Background(), applicationId, guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuildChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuildChannel(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuildEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuildEmoji(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuildFromTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuildFromTemplate(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuildRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuildRole(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuildScheduledEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuildScheduledEvent(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuildSoundboardSound", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuildSoundboardSound(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuildSticker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuildSticker(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateGuildTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateGuildTemplate(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateInteractionResponse", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interactionId string
		var interactionToken string

		resp, httpRes, err := apiClient.DefaultAPI.CreateInteractionResponse(context.Background(), interactionId, interactionToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateMessage(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateStageInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateStageInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateThread", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateThread(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateThreadFromMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateThreadFromMessage(context.Background(), channelId, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.CreateWebhook(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CrosspostMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string

		resp, httpRes, err := apiClient.DefaultAPI.CrosspostMessage(context.Background(), channelId, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteAllMessageReactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string

		httpRes, err := apiClient.DefaultAPI.DeleteAllMessageReactions(context.Background(), channelId, messageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteAllMessageReactionsByEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string
		var emojiName string

		httpRes, err := apiClient.DefaultAPI.DeleteAllMessageReactionsByEmoji(context.Background(), channelId, messageId, emojiName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteApplicationCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var commandId string

		httpRes, err := apiClient.DefaultAPI.DeleteApplicationCommand(context.Background(), applicationId, commandId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteApplicationEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var emojiId string

		httpRes, err := apiClient.DefaultAPI.DeleteApplicationEmoji(context.Background(), applicationId, emojiId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteApplicationUserRoleConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		httpRes, err := apiClient.DefaultAPI.DeleteApplicationUserRoleConnection(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteAutoModerationRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var ruleId string

		httpRes, err := apiClient.DefaultAPI.DeleteAutoModerationRule(context.Background(), guildId, ruleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteChannelPermissionOverwrite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var overwriteId string

		httpRes, err := apiClient.DefaultAPI.DeleteChannelPermissionOverwrite(context.Background(), channelId, overwriteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var entitlementId string

		httpRes, err := apiClient.DefaultAPI.DeleteEntitlement(context.Background(), applicationId, entitlementId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGroupDmUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var userId string

		httpRes, err := apiClient.DefaultAPI.DeleteGroupDmUser(context.Background(), channelId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuild(context.Background(), guildId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildApplicationCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var guildId string
		var commandId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuildApplicationCommand(context.Background(), applicationId, guildId, commandId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var emojiId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuildEmoji(context.Background(), guildId, emojiId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildIntegration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var integrationId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuildIntegration(context.Background(), guildId, integrationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuildMember(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildMemberRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string
		var roleId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuildMemberRole(context.Background(), guildId, userId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var roleId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuildRole(context.Background(), guildId, roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildScheduledEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var guildScheduledEventId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuildScheduledEvent(context.Background(), guildId, guildScheduledEventId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildSoundboardSound", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var soundId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuildSoundboardSound(context.Background(), guildId, soundId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildSticker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var stickerId string

		httpRes, err := apiClient.DefaultAPI.DeleteGuildSticker(context.Background(), guildId, stickerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteGuildTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var code string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteGuildTemplate(context.Background(), guildId, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string

		httpRes, err := apiClient.DefaultAPI.DeleteMessage(context.Background(), channelId, messageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteMyMessageReaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string
		var emojiName string

		httpRes, err := apiClient.DefaultAPI.DeleteMyMessageReaction(context.Background(), channelId, messageId, emojiName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteOriginalWebhookMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string

		httpRes, err := apiClient.DefaultAPI.DeleteOriginalWebhookMessage(context.Background(), webhookId, webhookToken).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteStageInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.DefaultAPI.DeleteStageInstance(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteThreadMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var userId string

		httpRes, err := apiClient.DefaultAPI.DeleteThreadMember(context.Background(), channelId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteUserMessageReaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string
		var emojiName string
		var userId string

		httpRes, err := apiClient.DefaultAPI.DeleteUserMessageReaction(context.Background(), channelId, messageId, emojiName, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string

		httpRes, err := apiClient.DefaultAPI.DeleteWebhook(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteWebhookByToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string

		httpRes, err := apiClient.DefaultAPI.DeleteWebhookByToken(context.Background(), webhookId, webhookToken).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteWebhookMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string
		var messageId string

		httpRes, err := apiClient.DefaultAPI.DeleteWebhookMessage(context.Background(), webhookId, webhookToken, messageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExecuteGithubCompatibleWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string

		httpRes, err := apiClient.DefaultAPI.ExecuteGithubCompatibleWebhook(context.Background(), webhookId, webhookToken).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExecuteSlackCompatibleWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string

		resp, httpRes, err := apiClient.DefaultAPI.ExecuteSlackCompatibleWebhook(context.Background(), webhookId, webhookToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExecuteWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string

		resp, httpRes, err := apiClient.DefaultAPI.ExecuteWebhook(context.Background(), webhookId, webhookToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FollowChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.FollowChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetActiveGuildThreads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetActiveGuildThreads(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAnswerVoters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string
		var answerId int32

		resp, httpRes, err := apiClient.DefaultAPI.GetAnswerVoters(context.Background(), channelId, messageId, answerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.GetApplication(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetApplicationCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var commandId string

		resp, httpRes, err := apiClient.DefaultAPI.GetApplicationCommand(context.Background(), applicationId, commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetApplicationEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var emojiId string

		resp, httpRes, err := apiClient.DefaultAPI.GetApplicationEmoji(context.Background(), applicationId, emojiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetApplicationRoleConnectionsMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.GetApplicationRoleConnectionsMetadata(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetApplicationUserRoleConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.GetApplicationUserRoleConnection(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAutoModerationRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var ruleId string

		resp, httpRes, err := apiClient.DefaultAPI.GetAutoModerationRule(context.Background(), guildId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetBotGateway", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetBotGateway(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.GetChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var entitlementId string

		resp, httpRes, err := apiClient.DefaultAPI.GetEntitlement(context.Background(), applicationId, entitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetEntitlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.GetEntitlements(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGateway", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetGateway(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuild(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildApplicationCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var guildId string
		var commandId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildApplicationCommand(context.Background(), applicationId, guildId, commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildApplicationCommandPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var guildId string
		var commandId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildApplicationCommandPermissions(context.Background(), applicationId, guildId, commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildBan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildBan(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var emojiId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildEmoji(context.Background(), guildId, emojiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildMember(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildNewMemberWelcome", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildNewMemberWelcome(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildPreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildPreview(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var roleId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildRole(context.Background(), guildId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildScheduledEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var guildScheduledEventId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildScheduledEvent(context.Background(), guildId, guildScheduledEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildSoundboardSound", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var soundId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildSoundboardSound(context.Background(), guildId, soundId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildSticker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var stickerId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildSticker(context.Background(), guildId, stickerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildTemplate(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildVanityUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildVanityUrl(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildWebhooks(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildWelcomeScreen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildWelcomeScreen(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildWidget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildWidget(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildWidgetPng", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildWidgetPng(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildWidgetSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildWidgetSettings(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetGuildsOnboarding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetGuildsOnboarding(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string

		resp, httpRes, err := apiClient.DefaultAPI.GetMessage(context.Background(), channelId, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetMyApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetMyApplication(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetMyGuildMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetMyGuildMember(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetMyOauth2Application", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetMyOauth2Application(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetMyOauth2Authorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetMyOauth2Authorization(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetMyUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetMyUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetOriginalWebhookMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string

		resp, httpRes, err := apiClient.DefaultAPI.GetOriginalWebhookMessage(context.Background(), webhookId, webhookToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetPublicKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetPublicKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetSelfVoiceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.GetSelfVoiceState(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetSoundboardDefaultSounds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetSoundboardDefaultSounds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetStageInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.GetStageInstance(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetSticker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stickerId string

		resp, httpRes, err := apiClient.DefaultAPI.GetSticker(context.Background(), stickerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetStickerPack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packId string

		resp, httpRes, err := apiClient.DefaultAPI.GetStickerPack(context.Background(), packId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetThreadMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var userId string

		resp, httpRes, err := apiClient.DefaultAPI.GetThreadMember(context.Background(), channelId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.DefaultAPI.GetUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetVoiceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string

		resp, httpRes, err := apiClient.DefaultAPI.GetVoiceState(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string

		resp, httpRes, err := apiClient.DefaultAPI.GetWebhook(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetWebhookByToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string

		resp, httpRes, err := apiClient.DefaultAPI.GetWebhookByToken(context.Background(), webhookId, webhookToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetWebhookMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string
		var messageId string

		resp, httpRes, err := apiClient.DefaultAPI.GetWebhookMessage(context.Background(), webhookId, webhookToken, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService InviteResolve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.DefaultAPI.InviteResolve(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService InviteRevoke", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.DefaultAPI.InviteRevoke(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService JoinThread", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.DefaultAPI.JoinThread(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LeaveGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		httpRes, err := apiClient.DefaultAPI.LeaveGuild(context.Background(), guildId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LeaveThread", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.DefaultAPI.LeaveThread(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListApplicationCommands", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.ListApplicationCommands(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListApplicationEmojis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.ListApplicationEmojis(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListAutoModerationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListAutoModerationRules(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListChannelInvites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.ListChannelInvites(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListChannelWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.ListChannelWebhooks(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildApplicationCommandPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildApplicationCommandPermissions(context.Background(), applicationId, guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildApplicationCommands", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildApplicationCommands(context.Background(), applicationId, guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildAuditLogEntries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildAuditLogEntries(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildBans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildBans(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildChannels(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildEmojis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildEmojis(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildIntegrations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildIntegrations(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildInvites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildInvites(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildMembers(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildRoles(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildScheduledEventUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var guildScheduledEventId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildScheduledEventUsers(context.Background(), guildId, guildScheduledEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildScheduledEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildScheduledEvents(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildSoundboardSounds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildSoundboardSounds(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildStickers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildStickers(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildTemplates(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListGuildVoiceRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.ListGuildVoiceRegions(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListMessageReactionsByEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string
		var emojiName string

		resp, httpRes, err := apiClient.DefaultAPI.ListMessageReactionsByEmoji(context.Background(), channelId, messageId, emojiName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.ListMessages(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListMyConnections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListMyConnections(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListMyGuilds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListMyGuilds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListMyPrivateArchivedThreads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.ListMyPrivateArchivedThreads(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListPinnedMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.ListPinnedMessages(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListPrivateArchivedThreads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.ListPrivateArchivedThreads(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListPublicArchivedThreads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.ListPublicArchivedThreads(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListStickerPacks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListStickerPacks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListThreadMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.ListThreadMembers(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListVoiceRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListVoiceRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PinMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string

		httpRes, err := apiClient.DefaultAPI.PinMessage(context.Background(), channelId, messageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PollExpire", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string

		resp, httpRes, err := apiClient.DefaultAPI.PollExpire(context.Background(), channelId, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PreviewPruneGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.PreviewPruneGuild(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PruneGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.PruneGuild(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutGuildsOnboarding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.PutGuildsOnboarding(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchGuildMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.SearchGuildMembers(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SendSoundboardSound", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.DefaultAPI.SendSoundboardSound(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SetChannelPermissionOverwrite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var overwriteId string

		httpRes, err := apiClient.DefaultAPI.SetChannelPermissionOverwrite(context.Background(), channelId, overwriteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SetGuildApplicationCommandPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var guildId string
		var commandId string

		resp, httpRes, err := apiClient.DefaultAPI.SetGuildApplicationCommandPermissions(context.Background(), applicationId, guildId, commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SetGuildMfaLevel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.SetGuildMfaLevel(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SyncGuildTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var code string

		resp, httpRes, err := apiClient.DefaultAPI.SyncGuildTemplate(context.Background(), guildId, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TriggerTypingIndicator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.TriggerTypingIndicator(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UnbanUserFromGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string

		httpRes, err := apiClient.DefaultAPI.UnbanUserFromGuild(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UnpinMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string

		httpRes, err := apiClient.DefaultAPI.UnpinMessage(context.Background(), channelId, messageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateApplication(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateApplicationCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var commandId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateApplicationCommand(context.Background(), applicationId, commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateApplicationEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var emojiId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateApplicationEmoji(context.Background(), applicationId, emojiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateApplicationRoleConnectionsMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateApplicationRoleConnectionsMetadata(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateApplicationUserRoleConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateApplicationUserRoleConnection(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateAutoModerationRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var ruleId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateAutoModerationRule(context.Background(), guildId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateChannel(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuild(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildApplicationCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string
		var guildId string
		var commandId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildApplicationCommand(context.Background(), applicationId, guildId, commandId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildEmoji", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var emojiId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildEmoji(context.Background(), guildId, emojiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildMember(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var roleId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildRole(context.Background(), guildId, roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildScheduledEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var guildScheduledEventId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildScheduledEvent(context.Background(), guildId, guildScheduledEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildSoundboardSound", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var soundId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildSoundboardSound(context.Background(), guildId, soundId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildSticker", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var stickerId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildSticker(context.Background(), guildId, stickerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var code string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildTemplate(context.Background(), guildId, code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildWelcomeScreen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildWelcomeScreen(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateGuildWidgetSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateGuildWidgetSettings(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string
		var messageId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateMessage(context.Background(), channelId, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateMyApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.UpdateMyApplication(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateMyGuildMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateMyGuildMember(context.Background(), guildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateMyUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.UpdateMyUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateOriginalWebhookMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateOriginalWebhookMessage(context.Background(), webhookId, webhookToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateSelfVoiceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string

		httpRes, err := apiClient.DefaultAPI.UpdateSelfVoiceState(context.Background(), guildId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateStageInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateStageInstance(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateVoiceState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guildId string
		var userId string

		httpRes, err := apiClient.DefaultAPI.UpdateVoiceState(context.Background(), guildId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateWebhook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateWebhook(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateWebhookByToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateWebhookByToken(context.Background(), webhookId, webhookToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateWebhookMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string
		var webhookToken string
		var messageId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateWebhookMessage(context.Background(), webhookId, webhookToken, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UploadApplicationAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.DefaultAPI.UploadApplicationAttachment(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
